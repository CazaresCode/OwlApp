@model Owl.Models.StudentModels.StudentCreate

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>StudentCreate</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfInstrument, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(x => x.TypeOfInstrument, "Select Instrument", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeOfInstrument, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", @id = "from" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control", @id = "to" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HasFoodAllergy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.HasFoodAllergy)
                    @Html.ValidationMessageFor(model => model.HasFoodAllergy, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FoodAllergy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FoodAllergy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FoodAllergy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfProgram, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(x => x.TypeOfProgram, "Select Instrument", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeOfProgram, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HasPaidTuition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.HasPaidTuition)
                    @Html.ValidationMessageFor(model => model.HasPaidTuition, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
        <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />
    <script type="text/javascript">
        $(function () {
            $("#from").datepicker({
                numberOfMonths: 2,
                onSelect: function (selected) {
                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() + 1);
                    $("#to").datepicker("option", "minDate", dt);
                }
            });
            $("#to").datepicker({
                numberOfMonths: 2,
                onSelect: function (selected) {
                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() - 1);
                    $("#from").datepicker("option", "maxDate", dt);
                }
            });
        });
    </script>
    @*<script>
            //this._unselectableClass = "ui-datepicker-unselectable";
            $(function () {
                $('#from, #to').datepicker({
                    showOn: "both",
                    dateFormat: "dd M yy",
                });
            });

            $(function () {
                $('#to').datepicker({
                    beforeShow: customRange
                });

            $(function customRange(input) {
                if (input.id == 'to') {
                    var minDate = new Date($('#from').val());
                    minDate.setDate(minDate.getDate() + 1)
                    $("#from>#to").addClass("ui-datepicker-unselectable");

                    return {
                        minDate: minDate
                    };
                }

                return {}
            });
        </script>*@
}

@*<script>
        //$(document).ready(function () {
        //    $("#dt1").datepicker({
        //        onSelect: function (selected) {
        //            $("#dt1").datepicker("option", "minDate", selected)
        //        }
        //    });
        //    $("#dt2").datepicker({
        //        onSelect: function (selected) {
        //            $("#dt2").datepicker("option", "maxDate", selected)
        //        }
        //    });
        //});

        $(document).ready(function () {
            $("#dt1").datepicker({
                //dateFormat: "dd-M-yy",
                //clearBtn: true,
                onSelect: function (selected) {
                    console.log("Test");
                    var dt2 = $("#dt1");
                    var minDate = $(this).datepicker('getDate');
                    dt2.datepicker('option', 'minDate', minDate);
                }
            })
                .on('clearDate', function (e) {
                    console.log("Test1");
                    dt1.datepicker('option', 'maxDate', 0);
                    dt2.datepicker('option', 'minDate', 0);
                });

            $("#dt2").datepicker({
                //dateFormat: "dd-M-yy",
                //clearBtn: true,
                onSelect: function (selected) {
                    var dt1 = $("#dt2");
                    var maxDate = $(this).datepicker('getDate');
                    dt1.datepicker('option', 'maxDate', maxDate);
                }
            })
                .on('clearDate', function (e) {
                    dt1.datepicker('option', 'maxDate');
                    dt2.datepicker('option', 'minDate');
                })
        })

    </script>*@



